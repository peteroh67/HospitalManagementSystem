package com.ponomic.hospitalmanagementsystem.dataaccess;

import com.ponomic.hospitalmanagementsystem.dtos.DTOAllPatientsView;
import com.ponomic.hospitalmanagementsystem.model.Patient;
import com.ponomic.hospitalmanagementsystem.model.PatientType;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.List;

public class PatientDAOImpl implements PatientDAO {

    private static Connection conn;

    public void Connect() {
        try{
            conn = DriverManager.getConnection(Schema.CONNECTION_STRING);
        }catch(SQLException e) {
            System.err.println("Error connecting to SQLite database : " + e.getMessage());
            e.getStackTrace();
        }
    }

    public void closeConnection() throws SQLException {

        try{
            conn.close();
        } catch(SQLException e){
            System.err.println("Error connecting to SQLite database : " + e.getMessage());
            e.getStackTrace();
        }
    }

    private ObservableList<Patient> patientList;
    private ObservableList<DTOAllPatientsView> allPatientsViewList;

    public PatientDAOImpl(){
        patientList = FXCollections.observableArrayList();
    }

    @Override
    public List<Patient> readAllPatients() {

        String query = "SELECT " +  Schema.COLUMN_PATIENT_TYPES_PATIENT_TYPE +"";

        try (PreparedStatement statement = conn.prepareStatement(query);
             ResultSet results = statement.executeQuery()){

            readPatientsFromResultSet(results);

        } catch (SQLException | NullPointerException exception) {
            System.err.println("Could not read data : " + exception.getMessage());
            exception.getStackTrace();
            return null;
        }
        return this.patientList;
    }


    @Override
    public Patient readPatientByID(int patientID) {

        return null;
    }

    private boolean readPatientsFromResultSet(ResultSet resultSet){

        patientList.removeAll();

        try{
            while (resultSet.next()){

                PatientType patientType = PatientType.MALE;
                LocalDate dob = LocalDate.parse(resultSet.getString("date_of_birth"), Schema.DATE_FORMATTER);

                Patient patient = new Patient(
                        resultSet.getString(Schema.COLUMN_PATIENTS_FIRST_NAME),
                        resultSet.getString(Schema.COLUMN_PATIENTS_LAST_NAME),
                        dob,
                        patientType);
                patientList.add(patient);
            }
        }catch(SQLException | DateTimeParseException e){
            System.err.println("Error reading data : " + e.getMessage());
            return false;
        }
        return true;
    }

    @Override
    public int insertPatient(Patient patient) {

        try (PreparedStatement statement = conn.prepareStatement(Schema.QUERY_INSERT_PATIENT);
             ResultSet results = statement.executeQuery()){

            // returns the autogenerated id of the new row
            try (ResultSet key = statement.getGeneratedKeys()) {
                if (key.next()) {
                    return key.getInt(1);
                }
            }
        } catch (SQLException | NullPointerException exception) {
            System.err.println("Could not insert data : " + exception.getMessage());
            exception.getStackTrace();
            return Schema.DEFAULT_ID_VALUE;
        }
        return Schema.DEFAULT_ID_VALUE;
    }



    @Override
    public boolean updatePatient(Patient patient) {
        String dob = Schema.DATE_FORMATTER.format(patient.getDateOfBirth());
        int patientTypeID = getPatientTypeID(patient);

        try (PreparedStatement statement = conn.prepareStatement(Schema.QUERY_UPDATE_PATIENT)){

            statement.setInt(1, patientTypeID);
            statement.setString(2, patient.getFirstName());
            statement.setString(3, patient.getLastName());
            statement.setString(4, dob);
            statement.setInt(5, patient.getID());

            statement.executeQuery();

            return true;

        } catch (SQLException | NullPointerException exception) {
            System.err.println("Could not edit data : " + exception.getMessage());
            exception.getStackTrace();
        }
        return false;
    }

    private int getPatientTypeID(Patient patient) {
        return 1;
    }

    @Override
    public boolean deletePatient(Patient patient) {

        try (PreparedStatement statement = conn.prepareStatement(Schema.QUERY_DELETE_PATIENT)){

            statement.setInt(1, patient.getID());
            statement.executeQuery();
            return true;

        } catch (SQLException | NullPointerException exception) {
            System.err.println("Could not edit data : " + exception.getMessage());
            exception.getStackTrace();
        }
        return false;
    }

    @Override
    public List readAllPatientsView() {

        allPatientsViewList.removeAll();

        try (PreparedStatement statement = conn.prepareStatement(Schema.QUERY_READ_ALL_PATIENTS_VIEW);
             ResultSet results = statement.executeQuery()){

            while (results.next()){
                LocalDate dob = LocalDate.parse(results.getString("date_of_birth"), Schema.DATE_FORMATTER);

                DTOAllPatientsView dto = new DTOAllPatientsView(
                        results.getString(Schema.COLUMN_PATIENTS_FIRST_NAME),
                        results.getString(Schema.COLUMN_PATIENTS_LAST_NAME),
                        results.getString(Schema.COLUMN_PATIENTS_DATE_OF_BIRTH), // don't need to convert to String as it is just being displayed in view
                        results.getString(Schema.COLUMN_TEAM_NAME),
                        results.getString(Schema.COLUMN_WARDS_NAME)
                );
                allPatientsViewList.add(dto);
            }

            return allPatientsViewList;

        } catch (SQLException | NullPointerException exception) {
            System.err.println("Could not read data : " + exception.getMessage());
            exception.getStackTrace();
        }
        return null;
    }

    // move to generic DAO interface or base class
    private static boolean updateOrDelete(String query) {

        try (PreparedStatement statement = conn.prepareStatement(query)){
            statement.executeQuery();
            return true;

        } catch (SQLException | NullPointerException exception) {
            System.err.println("Could not edit data : " + exception.getMessage());
            exception.getStackTrace();
        }
        return false;
    }

}
