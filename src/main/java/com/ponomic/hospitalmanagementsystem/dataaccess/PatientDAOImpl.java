package com.ponomic.hospitalmanagementsystem.dataaccess;

import com.ponomic.hospitalmanagementsystem.model.Patient;
import com.ponomic.hospitalmanagementsystem.model.PatientType;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.List;

public class PatientDAOImpl implements PatientDAO {

    private static Connection conn;

    public void Connect() {
        try{
            conn = DriverManager.getConnection(Schema.CONNECTION_STRING);
        }catch(SQLException e) {
            System.err.println("Error connecting to SQLite database : " + e.getMessage());
            e.getStackTrace();
        }
    }

    public void closeConnection() throws SQLException {

        try{
            conn.close();
        } catch(SQLException e){
            System.err.println("Error connecting to SQLite database : " + e.getMessage());
            e.getStackTrace();
        }
    }

    ObservableList<Patient> patientList;

    public PatientDAOImpl(){
        patientList = FXCollections.observableArrayList();
    }

    @Override
    public List<Patient> readAllPatients() {
        return null;
    }


    @Override
    public Patient readPatientByID(int patientID) {
        return null;
    }

    private boolean readPatientsFromResultSet(ResultSet resultSet){

        patientList.removeAll();

        try{
            while (resultSet.next()){

                PatientType patientType = PatientType.MALE;
                LocalDate dob = LocalDate.parse(resultSet.getString("DateOfBirth"), Schema.DATE_FORMATTER);

                Patient patient = new Patient(
                        resultSet.getString(Schema.COLUMN_PATIENTS_HEALTH_NUMBER),
                        resultSet.getString(Schema.COLUMN_PATIENTS_FIRST_NAME),
                        resultSet.getString(Schema.COLUMN_PATIENTS_LAST_NAME),
                        dob,
                        patientType);
                patientList.add(patient);
            }
        }catch(SQLException | DateTimeParseException e){
            System.err.println("Error reading data : " + e.getMessage());
            return false;
        }
        return true;
    }


    @Override
    public int insertPatient(Patient patient) {

        String query = getInsertPatientQuery(patient);

        try (PreparedStatement statement = conn.prepareStatement(query);
             ResultSet results = statement.executeQuery()){

            // returns the autogenerated id of the new row
            try (ResultSet key = statement.getGeneratedKeys()) {
                if (key.next()) {
                    return key.getInt(1);
                }
            }
        } catch (SQLException | NullPointerException exception) {
            System.err.println("Could not insert data : " + exception.getMessage());
            exception.getStackTrace();
            return Schema.DEFAULT_ID_VALUE;
        }
        return Schema.DEFAULT_ID_VALUE;
    }

    /**
     * patient object is created with a default ID. Patient objects data are added to the database.
     * The autogenerated ID is returned or if insert fails -1 is returned.
     * @param patient new patient to add
     * @return the id that is autogenerated in the database when the new row is inserted. returns null if the insert fails
     */
    public String getInsertPatientQuery(Patient patient){

        String dob = Schema.DATE_FORMATTER.format(patient.getDateOfBirth());
        String queryForPatientTypeID = getPatientTypeIDQuery(patient);

        String queryInsertPatient = "INSERT INTO " + Schema.TABLE_PATIENTS +
                "VALUES ('" + queryForPatientTypeID +
                ", '" + patient.getFirstName() +
                "', '" + patient.getLastName() +
                "', '" + dob +
                "')";

        return queryInsertPatient;
    }

    @Override
    public boolean updatePatient(Patient patient) {
        String query = getUpdatePatientQuery(patient);
        return updateOrDelete(query);
    }
    /**
     * All database column data is contained within patient object
     * @param patient
     * @return true if row successfully updated in database
     */
    private String getUpdatePatientQuery(Patient patient){
        String dob = Schema.DATE_FORMATTER.format(patient.getDateOfBirth());
        String queryForPatientTypeID = getPatientTypeIDQuery(patient);
        String patientID = getPatientIDQuery(patient);

        String query = "UPDATE patients " +
                "SET " + Schema.COLUMN_PATIENTS_PATIENT_TYPE + " = " + queryForPatientTypeID + ", " +
                Schema.COLUMN_PATIENTS_FIRST_NAME + " = '" + patient.getFirstName() + "', " +
                Schema.COLUMN_PATIENTS_LAST_NAME + " = '" + patient.getLastName() + "' " +
                Schema.COLUMN_PATIENTS_DATE_OF_BIRTH + " = '" + dob + "' " +
                "WHERE " + Schema.COLUMN_PATIENTS_ID + " = " + patientID;

        return query;
    }

    @Override
    public boolean deletePatient(Patient patient) {
        String query = getDeletePatientQuery(patient);
        return updateOrDelete(query);
    }

    private String getDeletePatientQuery(Patient patient){
        String patientID = getPatientIDQuery(patient);
        String query = "DELETE FROM " + Schema.TABLE_PATIENTS +
                " WHERE " + Schema.COLUMN_PATIENTS_ID + " = " + patientID;
        return query;
    }

    // move to generic DAO interface or base class
    private static boolean updateOrDelete(String query) {

        try (PreparedStatement statement = conn.prepareStatement(query)){
            statement.executeQuery();
            return true;

        } catch (SQLException | NullPointerException exception) {
            System.err.println("Could not edit data : " + exception.getMessage());
            exception.getStackTrace();
        }
        return false;
    }


    private String getPatientIDQuery(Patient patient){
        String dob = Schema.DATE_FORMATTER.format(patient.getDateOfBirth());

        String queryForID = "(SELECT " + Schema.COLUMN_PATIENTS_ID +
                " FROM " + Schema.TABLE_PATIENTS +
                " WHERE " + Schema.COLUMN_PATIENTS_HEALTH_NUMBER +
                " = " + patient.getHealthNumber() + ")";
        return queryForID;
    }

    private String getPatientTypeIDQuery(Patient patient){

        String queryForID = "(SELECT " + Schema.COLUMN_PATIENT_TYPES_ID +
                " FROM " + Schema.TABLE_PATIENT_TYPES +
                " WHERE " + Schema.COLUMN_PATIENT_TYPES_PATIENT_TYPE +
                " = '" + patient.getPatientType().toString() + "')";

        return queryForID;
    }

}
